/**
 * Takes two strings including only letters from a to z.
 * Returns a new sorted string containing distinct letters.
 *
 * @param {string} value1
 * @param {string} value2
 * @return {string}
 *
 * @example
 *   'azy', 'bk' => 'abkyz'
 *   'zxxlal','laxk'    => 'aklxz'
 *   'abcdefghijklmnop',  'lmnopqrstuvwxyz'  => 'abcdefghijklmnopqrstuvwxyz'
 */
function distinctLettersString(value1, value2) {
  	let obj = {};
	
	Array.prototype.forEach.call(value1, val => obj[val] = null);
	Array.prototype.forEach.call(value2, val => obj[val] = null);
	
	return Object.keys(obj).sort().join('');
}


/**
 * Takes a string with any characters.
 * Returns an object containing appearence of every distinct letters in lower case.
 *
 * @param {string} value
 * @return {Object}
 *
 * @example
 *  'Who you are, Buddy?' => { a:1, d:2, e:1, h:1, o:2, r:1, u:2, y:2 }
 *
 */

function lowerLetters(value) {
	let resObj = {};

	Array.prototype.forEach.call(value, val => {
		if(val.charCodeAt(0) > 96)
		{
			if (resObj[val] !== undefined)
			{
				resObj[val]++;
			}
			else
			{
				resObj[val] = 1;
			}
		}
	});
	
	return resObj;
}

/**
 * Write a function that will convert a string into title case, given an optional
 * list of exception (minor words). The list of minor words will be given as a
 * string with each word separated by a space. Your function should ignore the
 * case of the minor words string - it should behave in the same way even if the
 * case of the minor word is changed
 *
 * @param {string} the original string to be converted
 * @param {string} list of minor words that must always be lowercase except for
 *                  the first word in the string
 * @return {string}
 *
 * @example
 *    'a clash if KINGS', 'a an the of'  =>  'A Clash of Kings'
 *    'THE WIND IN THE WILLOWS', 'The In'  => 'The Wind in the Willows'
 *    'the quick brown fox'  => 'The Quick Brown Fox'
 */

function titleCaseConvert(title, minorWords) {
	
	let wrdsToTtlCase = title.toLowerCase().split(' '),
		minorList;
		if (minorWords) minorList= minorWords.toLowerCase().split(' ');
		
	wrdsToTtlCase.forEach((val, i) => 
	{
		if(minorList === undefined || minorList.indexOf(val) === -1)
		{
			wrdsToTtlCase[i] = val.charAt(0).toUpperCase() + val.slice(1);
		}
	});
	
	wrdsToTtlCase[0] = wrdsToTtlCase[0].charAt(0).toUpperCase() + wrdsToTtlCase[0].slice(1);
	
	return wrdsToTtlCase.join(' ');
}

/**
 * Your job is to create a calculator which evaluates expressions in Reverse Polish
 * notation (https://en.wikipedia.org/wiki/Reverse_Polish_notation). Empty expression
 * should evaluate to 0. Expression without operation returns the last number.
 *
 * @param {string} RPN string, each number and operation separated by a space
 *
 * @return {Number}
 *
 * @example
 *  ''  =>  0  // empty expression returns 0
 *  '1 2 3'  =>  3  // expression without operation returns the last number
 *  '4 2 +'  =>  6  // 4 + 2
 *  '2 5 * 2 + 3 /'  =>  4   //  ((5 * 2) + 2) / 3
 *  '5 1 2 + 4 * + 3 -'  =>  14   // 5 + ((1 + 2) * 4) -3
 */

function calcRPN(expr) {
	let steak = expr.split(' ');
	
	for(let i = 0; i < steak.length;)
	{
		let val = steak[i];
		
		if(val === '+')
		{
			steak.splice(i-2, 3, +steak[i-2] + +steak[i-1]);
			i -= 2;
		}
		else if(val === '-')
		{
			steak.splice(i-2, 3, +steak[i-2] - +steak[i-1]);
			i -= 2;
		}
		else if(val === '*')
		{
			steak.splice(i-2, 3, +steak[i-2] * +steak[i-1]);
			i -= 2;
		}
		else if(val === '/')
		{
			steak.splice(i-2, 3, +steak[i-2] / +steak[i-1]);
			i -= 2;
		}
		i++;
	}
	
	return steak[steak.length - 1];
}

module.exports = {
    distinctLettersString: distinctLettersString,
    lowerLetters: lowerLetters,
    titleCaseConvert: titleCaseConvert,
    calcRPN: calcRPN
};
